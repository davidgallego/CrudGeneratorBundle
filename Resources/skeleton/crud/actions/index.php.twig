
/**
{% block phpdoc_method_header %}
* List all notes.
{% endblock phpdoc_method_header %}
*
{% block phpdoc_method_annotations %}
    {% if 'annotation' == format %}
        * @ApiDoc(
        *   resource = true,
        *   statusCodes = {
        *     200 = "Returned when successful"
        *   }
        * )
        *
        * @Annotations\QueryParam(name="offset", requirements="\d+", nullable=true, description="Offset from which to start listing notes.")
        * @Annotations\QueryParam(name="limit", requirements="\d+", default="5", description="How many notes to return.")
        *
        * @Annotations\View()
        *
        * @param Request               $request      the request object
        * @param ParamFetcherInterface $paramFetcher param fetcher service
        *
        * @return array
    {% endif %}
{% endblock phpdoc_method_annotations %}

*/
{% block method_definition %}
    public function indexAction(Request $request, ParamFetcherInterface $paramFetcher)
{% endblock method_definition %}
    {
{% block method_body %}
    $offset = $paramFetcher->get('offset');
    $start = null == $offset ? 0 : $offset + 1;
    $limit = $paramFetcher->get('limit');
        list($filterForm, $queryBuilder) = $this->filter();

        $paginator  = $this->get('knp_paginator');
        $pagination = $paginator->paginate(
            $queryBuilder,
            $offset,
            (isset($limit)) ? $limit : 10
        );
{% endblock method_body %}

{% block method_return %}
{% if 'annotation' == format %}
        return array(
            'entities'   => $pagination,
            'filterForm' => $filterForm->createView(),
        );
{% else %}
        return $this->render('{{ bundle }}:{{ entity|replace({'\\': '/'}) }}:index.html.twig', array(
            'entities'   => $pagination,
            'filterForm' => $filterForm->createView(),
        ));
{% endif %}
{% endblock method_return %}
    }

    /**
    * Process filter request.
    *
    * @return array
    */
    protected function filter()
    {
        $request = $this->getRequest();
        $session = $request->getSession();
        $filterForm = $this->createFilterForm();
        $em = $this->getDoctrine()->getManager();
        $queryBuilder = $em->getRepository('{{ bundle }}:{{ entity }}')
            ->createQueryBuilder('a')
            ->orderBy('a.id', 'DESC')
        ;
        // Bind values from the request
        $filterForm->handleRequest($request);
        // Reset filter
        if ($filterForm->get('reset')->isClicked()) {
            $session->remove('{{ entity }}ControllerFilter');
            $filterForm = $this->createFilterForm();
        }

        // Filter action
        if ($filterForm->get('filter')->isClicked()) {
            if ($filterForm->isValid()) {
                // Build the query from the given form object
                $this->get('lexik_form_filter.query_builder_updater')->addFilterConditions($filterForm, $queryBuilder);
                // Save filter to session
                $filterData = $filterForm->getData();
                $session->set('{{ entity }}ControllerFilter', $filterData);
            }
        } else {
            // Get filter from session
            if ($session->has('{{ entity }}ControllerFilter')) {
                $filterData = $session->get('{{ entity }}ControllerFilter');
                $filterForm = $this->createFilterForm($filterData);
                $this->get('lexik_form_filter.query_builder_updater')->addFilterConditions($filterForm, $queryBuilder);
            }
        }

        return array($filterForm, $queryBuilder);
    }
    /**
    * Create filter form.
    *
    * @return \Symfony\Component\Form\Form The form
    */
    private function createFilterForm($filterData = null)
    {
        $form = $this->createForm(new {{ entity }}FilterType(), $filterData, array(
            'action' => $this->generateUrl('{{ route_name_prefix }}'),
            'method' => 'GET',
        ));

        $form
            ->add('filter', 'submit', array(
                'translation_domain' => 'DavgavaCrudGeneratorBundle',
                'label'              => 'views.index.filter',
                'attr'               => array('class' => 'btn btn-success col-lg-1'),
            ))
            ->add('reset', 'submit', array(
                'translation_domain' => 'DavgavaCrudGeneratorBundle',
                'label'              => 'views.index.reset',
                'attr'               => array('class' => 'btn btn-danger col-lg-1 col-lg-offset-1'),
            ))
        ;

        return $form;
    }
